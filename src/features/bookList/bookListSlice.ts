import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { IBook, loadingStatus } from '../../app/types';
import { fetchBook } from '../api/api';

export interface IBookListState {
    data: IBook[] | null,
    status: loadingStatus,
    currentPage: number,
    itemsPerPage: number,
    error: any,
    search: string,
}

const initialState: IBookListState = {
    data: null,
    status: loadingStatus.loading,
    currentPage: 1,
    itemsPerPage: 10,
    error: null,
    search: '',
};

// Thunk function to execute the fetchBook api call and return the data
export const fetchBooksAsync = createAsyncThunk(
    'bookList/fetchBooks',
    async () => {
        const response = await fetchBook();
        // The value we return becomes the `fulfilled` action payload
        return response.data.books;
    }
);

export const bookListSlice = createSlice({
    name: 'bookList',
    initialState,
    reducers: {
        setCurrentPage: (state, action) => {
            state.currentPage = action.payload;
        },
        setPageItem: (state, action) => {
            state.itemsPerPage = action.payload;
        },
    },
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchBooksAsync.pending, (state) => {
                state.status = loadingStatus.loading;
            })
            .addCase(fetchBooksAsync.fulfilled, (state, action: PayloadAction<IBook[] | null>) => {
                state.status = loadingStatus.success
                state.data = action.payload;
            })
            .addCase(fetchBooksAsync.rejected, (state, action) => {
                state.status = loadingStatus.failed;
                state.error = action.error.message;
            });
    },
});

export const { setCurrentPage, setPageItem } = bookListSlice.actions;
export const selectData = (state: RootState) => state.bookList;

export default bookListSlice.reducer;
