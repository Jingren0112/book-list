import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AxiosError } from 'axios';
import { RootState } from '../../app/store';
import { IBook, loadingStatus } from '../../app/types';
import { fetchBook } from '../api/api';

export interface IBookListState {
    data: IBook[] | null,
    status: loadingStatus,
    currentPage: number,
    itemsPerPage: number,
    error: any,
    search: string,
}

const initialState: IBookListState = {
    data: null,
    status: loadingStatus.loading,
    currentPage: 1,
    itemsPerPage: 10,
    error: null,
    search: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchBooksAsync = createAsyncThunk(
    'bookList/fetchBooks',
    async () => {
        const response = await fetchBook();
        // The value we return becomes the `fulfilled` action payload
        return response.data.books;
    }
);

export const bookListSlice = createSlice({
    name: 'bookList',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setCurrentPage: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.currentPage = action.payload;
        },
        pageItem: (state, action) => {
            state.itemsPerPage = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchBooksAsync.pending, (state) => {
                state.status = loadingStatus.loading;
            })
            .addCase(fetchBooksAsync.fulfilled, (state, action: PayloadAction<IBook[] | null>) => {
                state.status = loadingStatus.success
                state.data = action.payload;
            })
            .addCase(fetchBooksAsync.rejected, (state, action) => {
                state.status = loadingStatus.failed;
                state.error = action.error.message;
            });
    },
});

export const { setCurrentPage, pageItem } = bookListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectData = (state: RootState) => state.bookList;

export default bookListSlice.reducer;
